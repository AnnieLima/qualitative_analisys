---
title: "Qualitative Analisys - BRASFI"
author: "Annie Cavalcante"
format: html
editor: visual
jupyter: python3
editor_options: 
  chunk_output_type: console
---

## Preparing for analysis

```{r, packages}
#|echo: TRUE
#|message: FALSE
library(reticulate)
py_config()

```

```{r, pandas}
#|echo: TRUE
#|message: FALSE
# Install pandas, matplotlib, and wordcloud
py_require(c("pandas", "matplotlib", "wordcloud"))
py_require("nltk")
py_require("openpyxl")


```

## Qualitative analysis

```{python, packages}
#|echo: TRUE
#|message: FALSE
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import os
```

The file contains responses to a questionnaire administered via Google Forms. The spreadsheet was reviewed, and multiple-choice and open-ended questions were identified. The main questions identified were:

-   "O que normalmente te impede de participar das atividades da BRASFI?"

-   "O que mais te motivaria a participar ativamente da BRASFI?"

-    "O que podemos ajustar para facilitar sua participação e engajamento?"

-   "Qual tema ou formato de atividade te interessaria mais neste momento?"

-    "Se você pudesse mudar algo na BRASFI com um estalar de dedos, o que seria?"

-    "De que forma você poderia ajudar a potencializar a BRASFI?"

    After identifying the main questions, it was necessary to remove columns that might contain sensitive data.

```{python, file}
#|echo: TRUE
#|message: FALSE

# Load the Excel file
file_path = "/cloud/project/survey_data.xlsx"
df_raw = pd.read_excel(file_path, sheet_name="Respostas ao formulário 1")  

# Remove the last column
df = df_raw.iloc[:, :-1]

# Display the modified DataFrame
print(df)

```

After inspecting the questions and answers provided, we separate them in two categories:

-   Open questions: These are questions that require an answer to be entered.

-   Closed questions: Questions that provide a list of options to choose from, or that require you to select all applicable options.

```{python, closed}
#|echo: TRUE
#|message: FALSE

# Select the 'closed questions' (categorical or multiple choices answers)
colunas_fechadas = [
    "Você atualmente participa de algum setor, núcleo ou frente de trabalho dentro da BRASFI?",
    "Você sente que existe alinhamento entre suas entregas para a BRASFI e o retorno que você esperava (aprendizado, conexões, visibilidade, etc)?",
    "Nos últimos 6 meses, você participou de alguma atividade da BRASFI (Palestras, fóruns, webinars e mentoria)? (Você pode selecionar mais de uma opção)",
    "O formato atual de dias e horários (preferencialmente às quartas, 19h) são acessíveis para sua rotina?",
    "Qual frequência você considera ideal realizar os encontros?",
    "Caso não conseguisse participar da palestra ao vivo, você assistiria à gravação?",
    "Como você avalia os temas discutidos até agora?",
    "Você gostaria de ser ouvido(a) em rodas de conversa ou encontros informais da BRASFI?"
]
```

The first analysis will provide information about the "closed questions." The aim is to understand which activities members frequently participate in, if they participate in other activities, and if the format of the activities (e.g., lectures) meets their needs.

```{python, graphs_closed}
#|echo: TRUE
#|message: FALSE

# Create bar graphs for each questions
avocado_green = "#568203"  # avocado green hex code

# Create output directory for plots
output_dir = "exported_plots"
os.makedirs(output_dir, exist_ok=True)

# Loop through each column (question)
for col in colunas_fechadas:
    # Count responses and sort for better visual order
    value_counts = df[col].value_counts().sort_values()

    # Create numeric labels and mapping
    label_mapping = {i + 1: label for i, label in enumerate(value_counts.index)}
    numeric_labels = {i + 1: count for i, count in enumerate(value_counts.values)}

    # Plot
    plt.figure(figsize=(8, 6))
    plt.barh(list(numeric_labels.keys()), list(numeric_labels.values()), color=avocado_green)
    plt.title(f"Respostas para: {col}", fontsize=12)
    plt.xlabel("Número de respostas", fontsize=10)
    plt.ylabel("Categorias (numeradas)", fontsize=10)
    plt.grid(axis='x', linestyle='--', alpha=0.7)
    plt.yticks(list(numeric_labels.keys()))  # Ensure only whole number labels
    plt.tight_layout()

    # Add legend below the plot
    legend_text = "\n".join([f"{num}: {text}" for num, text in label_mapping.items()])
    plt.figtext(0.5, -0.25, f"Legenda:\n{legend_text}", wrap=True, horizontalalignment='center', fontsize=9)

    # Save plot as image
    filename = f"{output_dir}/{col.replace(' ', '_')}.png"
    plt.savefig(filename, bbox_inches='tight')
    plt.close()

print(f"Plots have been exported to the '{output_dir}' directory.")

```

You can add options to executable code like this

```{python}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
